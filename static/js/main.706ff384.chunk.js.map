{"version":3,"sources":["components/Header.tsx","store/types.d.ts","store/slices/uploadSlice.ts","hooks.ts","components/FileItem.tsx","components/FilePanel.tsx","App.tsx","store/store.ts","font-awesome/index.ts","index.tsx"],"names":["Header","FileStatus","props","fileObj","useRef","className","icon","onClick","current","click","type","ref","style","display","onChange","e","files","i","length","file","item","onSelectFile","handleFileChange","target","multiple","FileExtToType","pdf","rar","zip","xls","xlsx","bmp","png","jpg","jpeg","mp4","avi","initialState","status","WAITING","waiting","uploading","incompleted","completed","resetIndex","fileUploads","forEach","index","queueIndex","uploadSlice","createSlice","name","reducers","cancelAll","state","action","payload","INCOMPLETED","push","COMPLETED","UPLOADING","cancel","progress","splice","queue","next","setProgress","undefined","complete","incomplete","actions","selectUpload","upload","useAppDispatch","useDispatch","useAppSelector","useSelector","useInterval","callback","interval","savedCallback","useEffect","id","setInterval","clearInterval","FileItem","dispatch","fileType","fileSizeCaption","fileSize","toFixed","statusCaption","size","fileName","value","styles","buildStyles","pathColor","textColor","trailColor","backgroundColor","FilePanel","useState","collapsed","setCollpased","items","uploadState","useUploadItems","title","caption","rotation","placeholder","map","App","uploadData","percent","setPercent","counter","setCounter","ext","substring","lastIndexOf","fileUpload","store","configureStore","reducer","uploadReducer","library","add","faFile","faFilePdf","faFileArchive","faFileExcel","faFileImage","faFileVideo","faPlus","faChevronUp","faChevronDown","faTimes","faSpinner","faCheckCircle","faRedoAlt","fontAwesomeLib","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.706ff384.chunk.js","sourcesContent":["import React, { useRef } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\ntype PropsType = {\n  onSelectFile: Function\n}\n\nfunction Header(props: PropsType) {\n  const fileObj = useRef<HTMLInputElement>(null)\n\n  const handleFileChange = (files: FileList | null) => {\n    if (files == null) {\n      return\n    }\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i)\n      if (file != null) {\n        props.onSelectFile(file)\n      }\n    }\n  }\n\n  return (\n    <header className=\"App-header\">\n      Manage Files\n      <FontAwesomeIcon\n        className=\"btn icon-file-add blue\"\n        icon={['fas', 'plus']}\n        onClick={() => {\n          if (fileObj.current) {\n            fileObj.current.click()\n          }\n        }}\n      />\n      <input\n        type=\"file\"\n        ref={fileObj}\n        style={{ display: 'none' }}\n        onChange={(e) => handleFileChange(e.target.files)}\n        multiple\n      />\n    </header>\n  )\n}\n\nexport default Header\n","export enum FileStatus {\n  WAITING,\n  UPLOADING,\n  INCOMPLETED,\n  COMPLETED,\n}\n\nexport type FileType = 'pdf' | 'archive' | 'excel' | 'image' | 'video' | ''\n\nexport interface FileUpload {\n  queueIndex: number\n  fileName: string\n  fileSize: number\n  fileType: FileType\n  status: FileStatus\n  progress?: number\n  progressInterval?: ReturnType<typeof setInterval>\n}\n\nexport type IntervalState = ReturnType<typeof setInterval> | null\n\nexport const FileExtToType: { [key: string]: FileType } = {\n  pdf: 'pdf',\n  rar: 'archive',\n  zip: 'archive',\n  xls: 'excel',\n  xlsx: 'excel',\n  bmp: 'image',\n  png: 'image',\n  jpg: 'image',\n  jpeg: 'image',\n  mp4: 'video',\n  avi: 'video',\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { FileUpload, FileStatus, IntervalState } from '../types.d'\nimport type { RootState } from '../store'\n\nconst initialState: {\n  status: FileStatus\n  waiting: FileUpload[]\n  uploading: FileUpload[]\n  incompleted: FileUpload[]\n  completed: FileUpload[]\n} = {\n  status: FileStatus.WAITING,\n  waiting: [] as FileUpload[],\n  uploading: [] as FileUpload[],\n  incompleted: [] as FileUpload[],\n  completed: [] as FileUpload[],\n}\n\nconst resetIndex = (fileUploads: FileUpload[]) => {\n  fileUploads.forEach((item: FileUpload, index: number) => {\n    item.queueIndex = index\n  })\n}\n\nexport const uploadSlice = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    cancelAll: (state, action: PayloadAction<FileStatus>) => {\n      if (action.payload === FileStatus.WAITING) {\n        let waiting = [...state.waiting]\n        waiting.forEach((item: FileUpload) => {\n          item.status = FileStatus.INCOMPLETED\n        })\n        state.incompleted.push(...waiting)\n        state.waiting = [] as FileUpload[]\n      } else if (action.payload === FileStatus.COMPLETED) {\n        state.completed = [] as FileUpload[]\n      } else if (action.payload === FileStatus.UPLOADING) {\n        let uploading = [...state.uploading]\n        uploading.forEach((item: FileUpload) => {\n          item.status = FileStatus.INCOMPLETED\n        })\n        state.incompleted.push(...uploading)\n        state.uploading = [] as FileUpload[]\n      } else if (action.payload === FileStatus.INCOMPLETED) {\n        state.incompleted = [] as FileUpload[]\n      }\n    },\n    cancel: (state, action: PayloadAction<FileUpload>) => {\n      let payload = { ...action.payload }\n      payload.progress = 0\n      if (payload.status === FileStatus.WAITING) {\n        state.waiting.splice(payload.queueIndex, 1)\n        resetIndex(state.waiting)\n      } else if (payload.status === FileStatus.COMPLETED) {\n        state.completed.splice(payload.queueIndex, 1)\n        resetIndex(state.completed)\n      } else if (payload.status === FileStatus.UPLOADING) {\n        state.uploading.splice(payload.queueIndex, 1)\n        resetIndex(state.uploading)\n        payload.queueIndex = state.incompleted.length\n        payload.status = FileStatus.INCOMPLETED\n        state.incompleted.push(payload)\n        state.status = FileStatus.INCOMPLETED\n      } else if (payload.status === FileStatus.INCOMPLETED) {\n        state.incompleted.splice(payload.queueIndex, 1)\n        resetIndex(state.incompleted)\n      }\n    },\n    queue: (state, action: PayloadAction<FileUpload>) => {\n      let payload = { ...action.payload }\n      if (payload.status === FileStatus.INCOMPLETED) {\n        state.incompleted.splice(payload.queueIndex, 1)\n        resetIndex(state.incompleted)\n      }\n      if (state.uploading.length === 0 && state.waiting.length === 0) {\n        payload.status = FileStatus.UPLOADING\n        payload.queueIndex = state.uploading.length\n        payload.progress = 0\n        state.uploading.push(payload)\n        state.status = FileStatus.UPLOADING\n      } else {\n        payload.status = FileStatus.WAITING\n        payload.queueIndex = state.waiting.length\n        state.waiting.push(payload)\n      }\n    },\n    next: (state) => {\n      if (state.waiting.length > 0) {\n        let payload = { ...state.waiting[0] }\n        state.waiting.splice(payload.queueIndex, 1)\n        resetIndex(state.waiting)\n        payload.status = FileStatus.UPLOADING\n        payload.queueIndex = state.uploading.length\n        payload.progress = 0\n        state.uploading.push(payload)\n        state.status = FileStatus.UPLOADING\n      }\n    },\n    setProgress: (state, action: PayloadAction<number>) => {\n      let uploading = state.uploading[0]\n      if (uploading && uploading.progress != undefined) {\n        uploading.progress = action.payload\n      }\n    },\n    complete: (state, action: PayloadAction<FileUpload>) => {\n      let payload = { ...action.payload }\n      state.uploading.splice(payload.queueIndex, 1)\n      resetIndex(state.uploading)\n      payload.queueIndex = state.completed.length\n      payload.status = FileStatus.COMPLETED\n      state.completed.push(payload)\n      state.status = FileStatus.COMPLETED\n    },\n    incomplete: (state, action: PayloadAction<FileUpload>) => {\n      let payload = { ...action.payload }\n      state.uploading.splice(payload.queueIndex, 1)\n      resetIndex(state.uploading)\n      payload.progress = 0\n      payload.queueIndex = state.incompleted.length\n      payload.status = FileStatus.INCOMPLETED\n      state.incompleted.push(payload)\n      state.status = FileStatus.INCOMPLETED\n    },\n  },\n})\n\nexport const {\n  cancel,\n  cancelAll,\n  queue,\n  next,\n  setProgress,\n  complete,\n  incomplete,\n} = uploadSlice.actions\n\nexport const selectUpload = (state: RootState) => state.upload\n\nexport default uploadSlice.reducer\n","import { useEffect, useRef } from 'react'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store/store'\nimport { FileStatus, FileUpload } from './store/types.d'\nimport { selectUpload } from './store/slices/uploadSlice'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport const useUploadItems = (status: FileStatus): FileUpload[] => {\n  const uploadState = useAppSelector(selectUpload)\n  if (status == FileStatus.WAITING) {\n    return uploadState.waiting\n  } else if (status === FileStatus.UPLOADING) {\n    return uploadState.uploading\n  } else if (status === FileStatus.COMPLETED) {\n    return uploadState.completed\n  } else if (status === FileStatus.INCOMPLETED) {\n    return uploadState.incompleted\n  }\n  return []\n}\n\nexport const useUploadingItem = (): FileUpload | null => {\n  const uploadState = useAppSelector(selectUpload)\n  return uploadState.uploading[0]\n}\n\nexport const useUploadState = () => {\n  return useAppSelector(selectUpload)\n}\n\nexport const useInterval = (callback: () => void, interval: number) => {\n  const savedCallback = useRef(callback)\n\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    if (interval === 0) {\n      return\n    }\n    const id = setInterval(() => savedCallback.current(), interval)\n    return () => clearInterval(id)\n  }, [interval])\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconName } from '@fortawesome/fontawesome-svg-core'\nimport { FileUpload, FileStatus } from '../store/types.d'\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar'\n\nimport { cancel, queue } from '../store/slices/uploadSlice'\nimport { useAppDispatch } from '../hooks'\n\ntype PropsType = {\n  file: FileUpload\n}\n\nfunction FileItem(props: PropsType) {\n  const dispatch = useAppDispatch()\n\n  const fileType: IconName = ('file' +\n    ((props.file.fileType != '' ? '-' : '') + props.file.fileType)) as IconName\n  const fileSizeCaption =\n    (props.file.fileSize / (1024 * 1024)).toFixed(2) + 'MB'\n  let statusCaption = ''\n  if (props.file.status === FileStatus.UPLOADING) {\n    statusCaption = 'Uploading...'\n  } else if (props.file.status === FileStatus.WAITING) {\n    statusCaption = 'Waiting...'\n  }\n\n  return (\n    <div className=\"file-upload-item\">\n      <div className=\"file-main\">\n        <div className={`file-icon ${props.file.fileType}`}>\n          <FontAwesomeIcon icon={['fas', fileType]} size=\"2x\" />\n        </div>\n        <div className=\"file-content\">\n          <span className=\"title\">{props.file.fileName}</span>\n          <span className=\"size\">{fileSizeCaption}</span>\n        </div>\n      </div>\n      <div className=\"file-action\">\n        {props.file.status === FileStatus.UPLOADING ||\n        props.file.status === FileStatus.WAITING ? (\n          <div className=\"status\">\n            <CircularProgressbar\n              className=\"progress\"\n              value={props.file.progress ? props.file.progress : 0}\n              styles={buildStyles({\n                pathColor: '#2E6DDE',\n                textColor: '#f88',\n                trailColor: '#d6d6d6',\n                backgroundColor: '#3e98c7',\n              })}\n            />\n            {statusCaption}\n          </div>\n        ) : props.file.status === FileStatus.INCOMPLETED ? (\n          <div className=\"status failed\">\n            <FontAwesomeIcon\n              className=\"btn\"\n              icon={['fas', 'redo-alt']}\n              size=\"2x\"\n              onClick={() => {\n                dispatch(queue(props.file))\n              }}\n            />\n          </div>\n        ) : (\n          <div className=\"status success\">\n            <FontAwesomeIcon icon={['fas', 'check-circle']} size=\"2x\" />\n          </div>\n        )}\n        <FontAwesomeIcon\n          className=\"btn gray\"\n          icon={['fas', 'times']}\n          onClick={() => {\n            dispatch(cancel(props.file))\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default FileItem\n","import React, { useState } from 'react'\nimport { FileUpload, FileStatus } from '../store/types'\nimport { useUploadItems } from '../hooks'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport FileItem from './FileItem'\n\nimport { cancelAll } from '../store/slices/uploadSlice'\nimport { useAppDispatch } from '../hooks'\n\ntype PropsType = {\n  title: string\n  caption: string\n  status: FileStatus\n  placeholder: string\n  collapsed?: boolean\n}\n\nfunction FilePanel(props: PropsType) {\n  const dispatch = useAppDispatch()\n  const [collapsed, setCollpased] = useState(\n    props.collapsed != undefined ? props.collapsed : true\n  )\n  const items: FileUpload[] = useUploadItems(props.status)\n\n  const handleCancellAll = () => {\n    dispatch(cancelAll(props.status))\n  }\n\n  return (\n    <div className=\"file-panel\">\n      <div className=\"file-panel-header\">\n        <span className=\"title\">{props.title}</span>\n        <div className=\"file-panel-action\">\n          <span className=\"caption\" onClick={() => handleCancellAll()}>\n            {props.caption}\n          </span>\n          <FontAwesomeIcon\n            className=\"gray\"\n            icon={['fas', 'chevron-up']}\n            size=\"sm\"\n            rotation={!collapsed ? 180 : undefined}\n            onClick={() => {\n              setCollpased(!collapsed)\n            }}\n          />\n        </div>\n      </div>\n      <div className={`file-panel-body ${collapsed ? 'collapsed' : ''}`}>\n        <div className=\"placeholder\">\n          {items.length === 0 ? props.placeholder : ''}\n        </div>\n        {items.map((item: FileUpload, index: number) => (\n          <FileItem key={index} file={item} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default FilePanel\n","import React, { useState, useEffect } from 'react'\nimport './assets/style/App.css'\n\nimport Header from './components/Header'\nimport FilePanel from './components/FilePanel'\n\nimport {\n  FileExtToType,\n  FileStatus,\n  FileUpload,\n  IntervalState,\n} from './store/types.d'\nimport {\n  queue,\n  next,\n  complete,\n  incomplete,\n  setProgress,\n} from './store/slices/uploadSlice'\nimport {\n  useAppDispatch,\n  useUploadState,\n  useUploadingItem,\n  useInterval,\n} from './hooks'\n\nfunction App() {\n  const dispatch = useAppDispatch()\n  const uploadData = useUploadState()\n  const uploading = useUploadingItem()\n  const [interval, setInterval] = useState(0)\n  const [percent, setPercent] = useState(0)\n  const [counter, setCounter] = useState(0)\n\n  const handleSelectedFile = (file: File) => {\n    const ext = file.name.substring(file.name.lastIndexOf('.') + 1)\n    const type = FileExtToType[ext]\n    const fileUpload: FileUpload = {\n      queueIndex: 0,\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: type ? type : '',\n      status: FileStatus.WAITING,\n    }\n    dispatch(queue(fileUpload))\n  }\n\n  useInterval(() => {\n    setPercent(percent + 20)\n  }, interval)\n\n  useEffect(() => {\n    if (uploading && uploadData.status === FileStatus.UPLOADING) {\n      if (counter % 4 === 3 && percent > 50) {\n        dispatch(incomplete(uploading))\n        return\n      }\n      dispatch(setProgress(percent))\n      if (percent > 100) {\n        dispatch(complete(uploading))\n        setInterval(0)\n        setPercent(0)\n      }\n    }\n  }, [percent])\n\n  useEffect(() => {\n    if (uploadData.status === FileStatus.UPLOADING) {\n      setInterval(1000)\n    } else {\n      setInterval(0)\n      setPercent(0)\n      if (\n        uploadData.status === FileStatus.COMPLETED ||\n        uploadData.status === FileStatus.INCOMPLETED\n      ) {\n        setCounter(counter + 1)\n        dispatch(next())\n      }\n    }\n  }, [uploadData.status])\n\n  return (\n    <div className=\"App\">\n      <Header onSelectFile={handleSelectedFile} />\n      <FilePanel\n        title=\"Uploading\"\n        caption=\"Cancel Upload\"\n        status={FileStatus.UPLOADING}\n        placeholder=\"No uploading files yet\"\n      />\n      <FilePanel\n        title=\"Next Up\"\n        caption=\"Cancel All\"\n        status={FileStatus.WAITING}\n        placeholder=\"No waiting files yet\"\n      />\n      <FilePanel\n        title=\"Completed\"\n        caption=\"Dismiss All\"\n        status={FileStatus.COMPLETED}\n        placeholder=\"No file uploads completed yet\"\n      />\n      <FilePanel\n        title=\"Incomplete Uploads\"\n        caption=\"Dismiss All\"\n        status={FileStatus.INCOMPLETED}\n        placeholder=\"No incomplete uploads yet\"\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\nimport uploadReducer from './slices/uploadSlice'\n\nexport const store = configureStore({\n  reducer: {\n    upload: uploadReducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport type AppDispatch = typeof store.dispatch\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faFile,\n  faFilePdf,\n  faFileArchive,\n  faFileExcel,\n  faFileImage,\n  faFileVideo,\n  faPlus,\n  faChevronUp,\n  faChevronDown,\n  faTimes,\n  faSpinner,\n  faCheckCircle,\n  faRedoAlt,\n} from '@fortawesome/free-solid-svg-icons'\n\nexport default {\n  init: () =>\n    library.add(\n      faFile,\n      faFilePdf,\n      faFileArchive,\n      faFileExcel,\n      faFileImage,\n      faFileVideo,\n      faPlus,\n      faChevronUp,\n      faChevronDown,\n      faTimes,\n      faSpinner,\n      faCheckCircle,\n      faRedoAlt\n    ),\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/style/index.css'\nimport App from './App'\n\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nimport fontAwesomeLib from './font-awesome/index'\n\nfontAwesomeLib.init()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}